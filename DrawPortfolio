from cmu_graphics import *
import pandas as pd
import pandas_datareader.data as web
import datetime as dt
from datetime import date
import yfinance as yf

class dateButton: #class for graph date buttons
    def __init__(self, weeks, months, x, y, width, height, selected=-1):
        self.weeksBack = weeks
        self.monthsBack = months
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.fill = None
        self.selected = selected

def onAppStart(app):
    app.height = 800
    app.width = 1000
    app.cx = app.width/2
    app.cy = app.height/2
    app.screen = 0 #0 for title, 1 for main, 2 for analysis
    app.stock = None
    app.datapoints = []
    app.highs = []
    app.lows = []
    app.data = None
    app.stockButtons = []
    app.statButtons = []
    app.loading = 0 
    app.metric = None
    #
    app.todayM, app.todayD, app.todayY = getTodayDate(app)
    #portfolio variables
    app.portfolio = dict()
    app.input = ''
    app.pfDateButtons = []
    #portfolio graphing variables
    app.pfData = pd.DataFrame() #df of all stocks in portfolio
    app.plotData = pd.DataFrame() #df of sum of all closing prices of stocks
    app.oneYData = [] #list of plotData 1yr worth of data
    app.timeData = [] #indexing app.oneYData to fit timeframe
    app.high = None
    app.low = None

def drawPortfolioScreen(app):
    drawSetup(app)
    drawDateButtons(app)
    if app.input != 'Stock not found' or app.input != 'Maximum number of stocks reached':
        drawLabel(f'{app.input}', app.cx, 140, size=25, fill='green')
    # elif app.input == 'Maximum number of stocks reached':
    #     drawLabel('Maximum number of stocks reached', app.cx, 170, size=20, fill='red')
    # else:
    #     drawLabel('Could not find stock', app.cx, 170, size=20, fill='red')
    drawStocksandPrices(app)
    drawAppSkeleton(app)
    drawButtonSpaces(app)
    app.plotData['TV'] = app.pfData.sum(axis=1)
    drawChart(app)
    drawPFPrices(app)

def drawChart(app):
    if len(app.timeData) != 0:
        priceMin = min(app.lows) - 5
        priceMax = max(app.highs) + 5
        yScale = abs(priceMax-priceMin)/360 #price each pixel in y-axis represents
        graphX = 400
        graphLength = 550
        graphY = 600
    else:
        return 

def drawPFPrices(app): #draw dynamic prices on chart
    if app.low != None and app.high != None:
        drawLabel(f'{int(app.low)}', 392.5, 590, size=16)
        drawLabel(f'{int(app.high)}', 392.5, 250, size=16)
 
def drawSetup(app):
    drawRect(0, 0, 2*app.width, 180, align='center', fill='black')
    drawLogo(app, 160, 40, 40)
    drawRect(900, 45, 150, 60, align='center', fill='green', opacity=50, 
                border='green', borderWidth=5)
    drawLabel('Market Data', 900, 45, fill='white', size=22)
    drawLabel('Your Portfolio', app.cx, 45, fill='white', size=40)
    drawLabel("Enter stock ticker and price in form 'TICKER,PRICE,# OF SHARES' and press 'enter' or remove stock by typing 'DELETE=TICKER' and pressing 'enter'",
              app.cx, 110, size=14)

def drawLogo(app, cx, cy, size):
    textCenter = cx+size - (15/35)*size
    rectHeight, rectWidth, rectTop = 0.75*size, 0.25*size, cy - (7/20)*size
    rectGLeft, rectRLeft = (cx-((15/35)*size) - (42.5/20)*size, 
                            cx-((15/35)*size) - (32.5/20)*size)
    triHeight, triWidth = 0.3*size, (10.5/20)*size
    triGMid, triRMid = ((rectGLeft + rectGLeft+rectWidth)/2, 
                        (rectRLeft + rectRLeft+rectWidth)/2)
    rBaseY, rLeftX = cy + (7/20)*size, triRMid - triWidth/2
    gBaseY, gLeftX = cy - (7/20)*size + 1, triGMid - triWidth/2
    drawLabel('2 Finance', textCenter, cy, bold=True, fill='green', size=size, 
              font='cinzel')
    drawRect(rectGLeft, rectTop, rectWidth, rectHeight, fill='green')
    drawPolygon(gLeftX, gBaseY, triGMid, gBaseY-triHeight, gLeftX+triWidth, gBaseY, 
                fill='green')
    drawRect(rectRLeft, rectTop, rectWidth, rectHeight, fill='red')
    drawPolygon(rLeftX, rBaseY, triRMid, rBaseY+triHeight, rLeftX+triWidth, rBaseY,
                fill='red')

def addStockClose(app, stock):
    ticker = yf.Ticker(stock)
    temp = ticker.history(period='1mo')
    app.portfolio[f'{stock}'] = temp['Close']

def drawStocksandPrices(app):
    startY = 195
    for key in app.portfolio:
        drawLabel(f'{key} ({int(app.portfolio[key][1])})', 130, startY, size=25)
        closePrice = app.pfData[key].iloc[-1]
        drawLabel(f'${pythonRound(closePrice, 2)}', 277.5, startY-13, size=18)
        pctChange, color = getPctChange(app, key, closePrice)
        drawLabel(f'{pctChange}%', 277.5, startY+13, size=18, fill=color)
        startY += 75

def drawButtonSpaces(app):
    startY = 162.5
    for i in range(8):
        drawRect(45, startY, 170, 65, border='black', borderWidth=5, fill=None)
        # drawRect(215, startY, 125, 65, border='black', borderWidth=5, fill=None)
        drawLine(215, startY+2.75, 342.5, startY+2.75, lineWidth=5)
        drawLine(215, startY+62.25, 342.5, startY+62.25, lineWidth=5)
        drawLine(340, startY+2.75, 340, startY+62.25, lineWidth=5)
        startY += 75

def drawAppSkeleton(app):
    drawRect(675, 700, 300, 150, border='black', borderWidth=5, fill=None, align='center')
    drawLabel('Portfolio Performance', 675, 647.5, size=20)
    #draw chart axis
    drawLine(415, 600, 965, 600) 
    drawLabel('$', 400, 420, size=22)
    drawLine(415, 600, 415, 240)
    drawLabel(f'{app.todayM}-{app.todayD}', 945, 615, size=18)

def redrawAll(app):
    drawPortfolioScreen(app)

def onKeyPress(app, key):
    if app.input == 'Stock not found' or app.input == 'Maximum number of stocks reached':
        app.input = ''
    elif key == 'escape':
        print(app.plotData)
        print(len(app.oneYData))
        print(len(app.timeData))
    elif key == 'space':
        pass
    elif key == ',':
        if app.input.count(',') <= 1:
            if app.input[-1] != ',':
                app.input += ','
    elif key == '-':
        app.input += '-'
    elif key == '.':
        app.input += '.'
    elif key == 'backspace':
        app.input = app.input[:-1]
    elif key.isalpha() and len(key) == 1:
        if ',' in app.input:
            pass
        else:
            app.input += key.upper()
    elif key.isdigit():
        if ',' in app.input:
            app.input += key
        else:
            pass
    elif key == '=':
        app.input += key
    elif key == 'enter':
        if 'DELETE' in app.input:
            equalIndex = app.input.find('=')
            stock = app.input[equalIndex+1:]
            del app.portfolio[stock]
            app.pfData = app.pfData.drop(columns=[stock])
            app.input = ''
        elif app.input.count(',') != 2 or app.input[-1] == ',':
            pass
        else:
            commaIndex1 = app.input.find(',')
            stock = app.input[:commaIndex1]
            rest = app.input[commaIndex1+1:]
            commaIndex2 = rest.find(',')
            price = float(rest[:commaIndex2])
            numShares = float(rest[commaIndex2+1:])
            if int(numShares) == 0:
                return
            ticker = yf.Ticker(stock)
            if isValid(ticker):
                if stock in app.portfolio:
                    avgSharePrice = ((app.portfolio[stock][0]*app.portfolio[stock][1])+
                                     (price*numShares)) / (app.portfolio[stock][1]+numShares)
                    app.portfolio[stock][1] += numShares
                    app.portfolio[stock][0] = avgSharePrice
                    app.input = ''
                elif stock not in app.portfolio and len(app.portfolio) < 8:
                    data = ticker.history(period="1y")
                    app.pfData[f'{stock}'] = data['Close']
                    app.portfolio[stock] = [int(price), int(numShares)]
                    app.input = ''
                else:
                    app.input = 'Maximum number of stocks reached'
                
            else:
                app.input = 'Stock not found'


def createDateButtons(app): #create buttons to change chart timeframe
    #415-965
    #550 space, 400buttons, 150/5 increments
    oneY = dateButton(0, 12, 445, 175, 100, 50)
    app.pfDateButtons.append(oneY)
    sixM = dateButton(0, 6, 575, 175, 100, 50)
    app.pfDateButtons.append(sixM)
    oneM = dateButton(0, 1, 705, 175, 100, 50)
    # oneM.selected = 1
    app.pfDateButtons.append(oneM)
    oneW = dateButton(1, 0, 835, 175, 100, 50)
    app.pfDateButtons.append(oneW)

def drawDateButtons(app): #draw buttons to change chart timeframe
    createDateButtons(app)
    for button in app.pfDateButtons:
        drawRect(button.x, button.y, button.width, button.height, fill=button.fill,
                 border='black', borderWidth=2.5)
        if button.selected == True:
            drawRect(button.x, button.y, button.width, button.height, fill='green',
                 border='black', borderWidth=2.5)
    drawLabel('1Y', 495, 200, size=22)
    drawLabel('6M', 625, 200, size=22)
    drawLabel('1M', 755, 200, size=22)
    drawLabel('1W', 885, 200, size=22)

def onMousePress(app, mouseX, mouseY):
    if isIn(app, mouseX, mouseY, 825, 15, 150, 60): 
        app.screen = 1
    for db in app.pfDateButtons:
        if isIn(app, mouseX, mouseY, db.x, db.y, db.width, db.height):
            app.oneYData = app.plotData['TV'].tolist()
            daysBack = db.weeksBack*7 + db.monthsBack*30
            app.timeData = app.oneYData[-daysBack:]
            try:
                app.high = max(app.timeData)
                app.low = min(app.timeData)
            except:
                return
            for others in app.pfDateButtons: #toggle selected button
                others.selected = -1
            db.selected = -db.selected


def isValid(ticker):
    info = ticker.info
    return 'city' in info

def isIn(app, mouseX, mouseY, buttonLeftX, buttonTopY, width, height):
    buttonRightX = buttonLeftX + width
    buttonBotY = buttonTopY + height
    return (buttonTopY <= mouseY <= buttonBotY and 
            buttonLeftX <= mouseX <= buttonRightX)

def getTodayDate(app):
    today = str(date.today())
    year = int(today[:4])
    month = int(today[5:7])
    day = int(today[8:])
    return month, day, year

def getPctChange(app, stock, closePrice):
    purchasePrice = app.portfolio[stock][0]
    pctChange = pythonRound(((closePrice-purchasePrice) / purchasePrice)*100, 1)
    if pctChange < 0:
        return (abs(pctChange), 'red')
    elif pctChange > 0:
        return (pctChange, 'green')
    else:
        return (pctChange, 'grey')


def main():
    runApp(app)
main()
