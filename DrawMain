from cmu_graphics import *
import pandas as pd
import pandas_datareader.data as web
import datetime as dt
from datetime import date
from dateutil.relativedelta import relativedelta
import yfinance as yf
class Button:
    def __init__(self, stock, x, y, width, height, fill):
        self.stock = stock
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.fill = fill
        self.selected = False
    def __repr__(self):
        return f'{self.stock} | {self.selected}'
def onAppStart(app):
    app.height = 800
    app.width = 1000
    app.cx = app.width/2
    app.cy = app.height/2
    app.screen = 0 #0 for title, 1 for main, 
    app.stock = None
    app.datapoints = []
    app.highs = []
    app.lows = []
    app.data = None
    app.stockButtons = []
    app.loading = 0
    app.todayM, app.todayD, app.todayY = getTodayDate(app)
def drawMain(app):
    drawRect(0, 0, 2*app.width, 180, align='center', fill='black')
    drawDateButtons(app)
    drawAxis(app)
    drawLogo(app, 160, 45, 35)
    drawButtons(app)
    if app.stock == None:
        drawLabel('Choose a stock', app.cx, 45, fill='white', size=50)
        pass
    else:
        drawLabel(f'{app.stock}', app.cx, 45, fill='white', size=55)
        drawAxis(app)
        drawCandles(app)
        drawRect(900, 45, 150, 60, align='center', fill='grey', opacity=50, 
                border='green', borderWidth=5)
        drawLabel('Analysis', 900, 45, fill='white', size=22)
        drawStats(app)
def createStockButtons(app):
    msft = Button('MSFT', 60, 120, 200, 70, None)
    app.stockButtons.append(msft)
    aapl = Button('AAPL', 60, 200, 200, 70, None)
    app.stockButtons.append(aapl)
    amzn = Button('AMZN', 60, 280, 200, 70, None)
    app.stockButtons.append(amzn)
    jpm = Button('JPM', 60, 360, 200, 70, None)
    app.stockButtons.append(jpm)
    tsla = Button('TSLA', 60, 440, 200, 70, None)
    app.stockButtons.append(tsla)
    avgo = Button('AVGO', 60, 520, 200, 70, None)
    app.stockButtons.append(avgo)
    lly = Button('LLY', 60, 600, 200, 70, None)
    app.stockButtons.append(lly)
    brk = Button('BRK-B', 60, 680, 200, 70, None)
    app.stockButtons.append(brk)
def drawAxis(app):
    drawLine(350, 605, 950, 605)
    drawLine(350, 605, 350, 205)
def drawLogo(app, cx, cy, size):
    textCenter = cx+size - (15/35)*size
    rectHeight, rectWidth, rectTop = 0.75*size, 0.25*size, cy - (7/20)*size
    rectGLeft, rectRLeft = (cx-((15/35)*size) - (42.5/20)*size, 
                            cx-((15/35)*size) - (32.5/20)*size)
    triHeight, triWidth = 0.3*size, (10.5/20)*size
    triGMid, triRMid = ((rectGLeft + rectGLeft+rectWidth)/2, 
                        (rectRLeft + rectRLeft+rectWidth)/2)
    rBaseY, rLeftX = cy + (7/20)*size, triRMid - triWidth/2
    gBaseY, gLeftX = cy - (7/20)*size + 1, triGMid - triWidth/2
    drawLabel('2 Finance', textCenter, cy, bold=True, fill='green', size=size, 
              font='cinzel')
    drawRect(rectGLeft, rectTop, rectWidth, rectHeight, fill='green')
    drawPolygon(gLeftX, gBaseY, triGMid, gBaseY-triHeight, gLeftX+triWidth, gBaseY, 
                fill='green')
    drawRect(rectRLeft, rectTop, rectWidth, rectHeight, fill='red')
    drawPolygon(rLeftX, rBaseY, triRMid, rBaseY+triHeight, rLeftX+triWidth, rBaseY,
                fill='red')
def getOpenHighLowCloseVol(app, ticker, startY, startM, startD, endY, endM, endD):
    result = dict()
    startDate = dt.datetime(startY, startM, startD)
    endDate = dt.datetime(endY, endM, endD)
    temp = web.DataReader(ticker,'stooq', startDate, endDate)
    df = temp.sort_index(ascending=True)
    try:
        df['Volume'] = df['Volume'].round().astype(int)
    except:
        pass
    values = df.values.tolist()
    counter = 0
    for index, row in df.iterrows():
        result[str(index)[:10]] = values[counter]
        counter += 1
    return result

def redrawAll(app):
    drawMain(app)
        
def drawCandles(app):
    drawPrices(app)
    priceMin = min(app.lows) - 5
    priceMax = max(app.highs) + 5
    yScale = abs(priceMax-priceMin)/400 #price each pixel in y-axis represents
    graphX = 350
    graphLength = 950-350
    graphY = 605
    candleWidth = (graphLength/len(app.datapoints) - 
                   (graphLength/len(app.datapoints)/10))
    candleX = graphX + candleWidth/2 + 5
    for datapoint in app.datapoints:
        open = datapoint[0]
        high = datapoint[1]
        low = datapoint[2]
        close = datapoint[3]
        volume = datapoint[4]
        openY = graphY-((open-priceMin)/yScale)
        highY = graphY-((high-priceMin)/yScale)
        lowY = graphY-((low-priceMin)/yScale)
        closeY = graphY-((close-priceMin)/yScale)
        if close > open:
            drawLine(candleX, highY, candleX, closeY)
            drawLine(candleX, lowY, candleX, openY)
            drawRect(candleX-candleWidth/2, closeY, candleWidth, 
                     abs(closeY-openY), fill = 'green')
            candleX += graphLength/len(app.datapoints)
        elif open > close:
            drawLine(candleX, highY, candleX, openY)
            drawLine(candleX, lowY, candleX, closeY)
            drawRect(candleX-candleWidth/2, openY, candleWidth, 
                     abs(closeY-openY), fill = 'red')
            candleX += graphLength/len(app.datapoints)
def drawPrices(app):
    drawLabel(f'{int(min(app.lows))}', 330, 600)
    drawLabel(f'{int(max(app.highs))}', 330, 210)
def drawButtons(app):
    createStockButtons(app)
    for button in app.stockButtons:
        drawRect(button.x, button.y, button.width, button.height, 
                    border='black', borderWidth=4, fill=None)
        if button.selected == True:
            drawRect(button.x, button.y, button.width, button.height, 
                    border='black', borderWidth=4, fill='green')
    drawLabels(app)

        
def onMousePress(app, mouseX, mouseY):
    if isIn(app, mouseX, mouseY, 900, 45, 150, 60):
        app.screen = 2
    if isIn(app, mouseX, mouseY, 405, 125, 100, 50): #1 year
        startM, startD, startY = getStartDate(0, 12)
        try:
            app.data = getOpenHighLowCloseVol(app, app.stock, startY, 
                                                    startM, startD, app.todayY, 
                                                    app.todayM, app.todayD)
            app.datapoints = []
            app.highs = []
            app.lows = []
            for date in app.data:
                app.datapoints.append(app.data[date])
                for datapoint in app.datapoints:
                    high = datapoint[1]
                    low = datapoint[2]
                    app.highs.append(high)
                    app.lows.append(low)
        except:
            pass
    elif isIn(app, mouseX, mouseY, 538+(1/3), 125, 100, 50): #6M
        startM, startD, startY = getStartDate(0, 6)
        try:
            app.data = getOpenHighLowCloseVol(app, app.stock, startY, 
                                                    startM, startD, app.todayY, 
                                                    app.todayM, app.todayD)
            app.datapoints = []
            app.highs = []
            app.lows = []
            for date in app.data:
                app.datapoints.append(app.data[date])
                for datapoint in app.datapoints:
                    high = datapoint[1]
                    low = datapoint[2]
                    app.highs.append(high)
                    app.lows.append(low)
        except:
            pass
    elif isIn(app, mouseX, mouseY, 671+(2/3), 125, 100, 50): #1M
        startM, startD, startY = getStartDate(0, 1)
        try:
            app.data = getOpenHighLowCloseVol(app, app.stock, startY, 
                                                    startM, startD, app.todayY, 
                                                    app.todayM, app.todayD)
            app.datapoints = []
            app.highs = []
            app.lows = []
            for date in app.data:
                app.datapoints.append(app.data[date])
                for datapoint in app.datapoints:
                    high = datapoint[1]
                    low = datapoint[2]
                    app.highs.append(high)
                    app.lows.append(low)
        except:
            pass
    elif isIn(app, mouseX, mouseY, 805, 125, 100, 50): #1W
        startM, startD, startY = getStartDate(1, 0)
        try:
            app.data = getOpenHighLowCloseVol(app, app.stock, startY, 
                                                startM, startD,
                                                app.todayY, app.todayM, app.todayD)
            app.datapoints = []
            app.highs = []
            app.lows = []
            for date in app.data:
                app.datapoints.append(app.data[date])
                for datapoint in app.datapoints:
                    high = datapoint[1]
                    low = datapoint[2]
                    app.highs.append(high)
                    app.lows.append(low)
        except:
            pass
    for button in app.stockButtons:
        if isIn(app, mouseX, mouseY, button.x, button.y, button.width, button.height):
            app.stock = button.stock
            try:
                app.data = getOpenHighLowCloseVol(app, app.stock, app.todayY, 
                                                  app.todayM-1, app.todayD, app.todayY, 
                                                  app.todayM, app.todayD)
                app.datapoints = []
                app.highs = []
                app.lows = []
                for date in app.data:
                    app.datapoints.append(app.data[date])
                    for datapoint in app.datapoints:
                        high = datapoint[1]
                        low = datapoint[2]
                        app.highs.append(high)
                        app.lows.append(low)
            except:
                pass
            for others in app.stockButtons: #toggle selected button (doesn't work)
                others.selected = False
            button.selected = not button.selected

def drawLabels(app):
    drawLabel('Microsoft (MSFT)', 160, 155, align='center', size=17)
    drawLabel('Apple (AAPL)', 160, 235, align='center', size=17)
    drawLabel('Amazon (AMZN)', 160, 315, align='center', size=17)
    drawLabel('J.P. Morgan (JPM)', 160, 395, align='center', size=17)
    drawLabel('Tesla (TSLA)', 160, 475, align='center', size=17)
    drawLabel('Broadcom Inc (AVGO)', 160, 555, align='center', size=17)
    drawLabel('Eli Lilly and Co (LLY)', 160, 635, align='center', size=17)
    drawLabel('Berkshire Hathaway', 160, 704, align='center', size=15)
    drawLabel('(BRK-B)', 160, 725, align='center', size=15)

def getOpenHighLowCloseVol(app, stock, startY, startM, startD, endY, endM, endD):
    result = dict()
    startDate = dt.datetime(startY, startM, startD)
    endDate = dt.datetime(endY, endM, endD)
    temp = web.DataReader(stock,'stooq', startDate, endDate)
    df = temp.sort_index(ascending=True)
    try:
        df['Volume'] = df['Volume'].round().astype(int)
    except:
        pass
    values = df.values.tolist()
    counter = 0
    for index, row in df.iterrows():
        result[str(index)[:10]] = values[counter]
        counter += 1
    return result

def isIn(app, mouseX, mouseY, buttonLeftX, buttonTopY, width, height):
    buttonRightX = buttonLeftX + width
    buttonBotY = buttonTopY + height
    return (buttonTopY <= mouseY <= buttonBotY and 
            buttonLeftX <= mouseX <= buttonRightX)

def getTodayDate(app):
    today = str(date.today())
    year = int(today[:4])
    month = int(today[5:7])
    day = int(today[8:])
    return month, day, year
def getStartDate(weeks, months):
    today = date.today()
    if weeks == 0:
        result = str(today - relativedelta(months=months))
        return (int(result[5:7]), int(result[8:]), int(result[:4]))
    elif months == 0:
        result = str(today - relativedelta(weeks=weeks))
        return (int(result[5:7]), int(result[8:]), int(result[:4]))
def drawDateButtons(app): #950 to 350
    drawRect(405, 125, 100, 50, fill=None, border='black', borderWidth=2.5)
    drawLabel('1Y', 455, 150, size=22)
    drawRect(538+(1/3), 125, 100, 50, fill=None, border='black', borderWidth=2.5)
    drawLabel('6M', 588+(1/3), 150, size=22)
    fillz = 'green' if app.stock != None else None
    drawRect(671+(2/3), 125, 100, 50, fill=fillz, border='black', borderWidth=2.5,
                                      opacity=100)
    drawLabel('1M', 721+(2/3), 150, size=22)
    drawRect(805, 125, 100, 50, fill=None, border='black', borderWidth=2.5)
    drawLabel('1W', 855, 150, size=22)

def drawStats(app): #350 - 950
    drawRect(372.5, 645, 170, 80, fill=None, border='black', borderWidth=2.5)
    drawRect(565, 645, 170, 80, fill=None, border='black', borderWidth=2.5)
    drawRect(757.5, 645, 170, 80, fill=None, border='black', borderWidth=2.5)
    drawLabel('Volume:', 457.5, 665, size=20)
    drawLabel('Market Cap:', 650, 665, size=20)
    drawLabel('PE Ratio (TTM):', 842.5, 665, size=20)
    stock = yf.Ticker(app.stock)
    vol = stock.info['volume'] / 10**6 #in millions
    mc = stock.info['marketCap'] / 10**12 #in trillions
    pe = stock.info['trailingPE']
    drawLabel(f'{pythonRound(vol, 1)} M', 457.5, 700, size=20)
    drawLabel(f'{pythonRound(mc, 2)} T', 650, 700, size=20)
    drawLabel(f'{pythonRound(pe, 2)}', 842.5, 700, size=20)

def main():
    runApp(app)
main()
