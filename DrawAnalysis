from cmu_graphics import *
import pandas as pd
import pandas_datareader.data as web
import datetime as dt
class Button:
    def __init__(self, stock, x, y, width, height, fill):
        self.stock = stock
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.fill = fill
        self.selected = -1 #-1 not selected, 1 selected
    def __repr__(self):
        return f'{self.stock} | {self.selected}'
class statButton:
    def __init__(self, x, y, metric):
        self.x = x
        self.y = y
        self.width = 200
        self.height = 70
        self.metric = metric
        self.selected = -1

def onAppStart(app):
    app.height = 800
    app.width = 1000
    app.cx = app.width/2
    app.cy = app.height/2
    app.screen = 0 #0 for title, 1 for main, 2 for analysis
    app.stock = None
    app.datapoints = []
    app.highs = []
    app.lows = []
    app.data = None
    app.stockButtons = []
    app.statButtons = []
    app.loading = 0
    app.metric = None

def drawAnalysis(app):
    drawRect(0, 0, 2*app.width, 180, align='center', fill='black')
    drawLogo(app, 160, 40, 40)
    drawButtons(app)
    drawLabel(f'{app.stock}', app.cx, 40, fill='white', size=40)
    drawRect(900, 45, 150, 60, align='center', fill='grey', opacity=50, border='green',
                borderWidth=5)
    drawLabel('Chart', 900, 45, fill='white', size=22)
    drawStatButtons(app)
    drawRating(app)
    drawHeadlines(app)
def createButtons(app):
    msft = Button('MSFT', 60, 120, 200, 70, None)
    app.stockButtons.append(msft)
    aapl = Button('AAPL', 60, 200, 200, 70, None)
    app.stockButtons.append(aapl)
    amzn = Button('AMZN', 60, 280, 200, 70, None)
    app.stockButtons.append(amzn)
    jpm = Button('JPM', 60, 360, 200, 70, None)
    app.stockButtons.append(jpm)
    tsla = Button('TSLA', 60, 440, 200, 70, None)
    app.stockButtons.append(tsla)
    avgo = Button('AVGO', 60, 520, 200, 70, None)
    app.stockButtons.append(avgo)
    lly = Button('LLY', 60, 600, 200, 70, None)
    app.stockButtons.append(lly)
    brk = Button('BRK-B', 60, 680, 200, 70, None)
    app.stockButtons.append(brk)

def drawLogo(app, cx, cy, size):
    textCenter = cx+size - (15/35)*size
    rectHeight, rectWidth, rectTop = 0.75*size, 0.25*size, cy - (7/20)*size
    rectGLeft, rectRLeft = (cx-((15/35)*size) - (42.5/20)*size, 
                            cx-((15/35)*size) - (32.5/20)*size)
    triHeight, triWidth = 0.3*size, (10.5/20)*size
    triGMid, triRMid = ((rectGLeft + rectGLeft+rectWidth)/2, 
                        (rectRLeft + rectRLeft+rectWidth)/2)
    rBaseY, rLeftX = cy + (7/20)*size, triRMid - triWidth/2
    gBaseY, gLeftX = cy - (7/20)*size + 1, triGMid - triWidth/2
    drawLabel('2 Finance', textCenter, cy, bold=True, fill='green', size=size, 
              font='cinzel')
    drawRect(rectGLeft, rectTop, rectWidth, rectHeight, fill='green')
    drawPolygon(gLeftX, gBaseY, triGMid, gBaseY-triHeight, gLeftX+triWidth, gBaseY, 
                fill='green')
    drawRect(rectRLeft, rectTop, rectWidth, rectHeight, fill='red')
    drawPolygon(rLeftX, rBaseY, triRMid, rBaseY+triHeight, rLeftX+triWidth, rBaseY,
                fill='red')
def getOpenHighLowCloseVol(app, ticker, startY, startM, startD, endY, endM, endD):
    result = dict()
    startDate = dt.datetime(startY, startM, startD)
    endDate = dt.datetime(endY, endM, endD)
    temp = web.DataReader(ticker,'stooq', startDate, endDate)
    df = temp.sort_index(ascending=True)
    try:
        df['Volume'] = df['Volume'].round().astype(int)
    except:
        pass
    values = df.values.tolist()
    counter = 0
    for index, row in df.iterrows():
        result[str(index)[:10]] = values[counter]
        counter += 1
    return result
def redrawAll(app):
    drawAnalysis(app)

def drawButtons(app):
    createButtons(app)
    for button in app.stockButtons:
            if button.selected == -1:
                drawRect(button.x, button.y, button.width, button.height, border='black', 
                borderWidth=5, fill=None)
            elif button.selected == 1:
                drawRect(button.x, button.y, button.width, button.height, border='black', 
                borderWidth=5, fill="green")
    drawLabels(app)

def createStatButtons(app): #start at 260
    rsi = statButton(370+(1/3), 195, 'RSI')
    app.statButtons.append(rsi)
    macd = statButton(688+(2/3), 195, 'MACD')
    app.statButtons.append(macd)

def drawStatButtons(app):
    createStatButtons(app)
    for sb in app.statButtons:
        if sb.selected == 1:
            drawRect(sb.x, sb.y, sb.width, sb.height, border='black', borderWidth=5, 
                     fill='green')
        elif sb.selected == -1:
            drawRect(sb.x, sb.y, sb.width, sb.height, border='black', borderWidth=5, 
                     fill=None)
    drawLabel('RSI', 470+(1/3), 230, size=24)
    drawLabel('MACD', 788+(2/3), 230, size=24)

def onMousePress(app, mouseX, mouseY):
    if isIn(app, mouseX, mouseY, 825, 15, 150, 60): 
        app.screen = 1
    for button in app.stockButtons:
        if isIn(app, mouseX, mouseY, button.x, button.y, button.width, button.height):
            app.stock = button.stock
            for others in app.stockButtons: #toggle selected button
                others.selected = -1
            button.selected =  -button.selected
    for sb in app.statButtons:
        if isIn(app, mouseX, mouseY, sb.x, sb.y, sb.width, sb.height):
            app.metric = sb.metric
            for others in app.statButtons: #toggle selected button
                others.selected = -1
            sb.selected = -sb.selected

def drawLabels(app):
    drawLabel('Microsoft (MSFT)', 160, 155, align='center', size=17)
    drawLabel('Apple (AAPL)', 160, 235, align='center', size=17)
    drawLabel('Amazon (AMZN)', 160, 315, align='center', size=17)
    drawLabel('J.P. Morgan (JPM)', 160, 395, align='center', size=17)
    drawLabel('Tesla (TSLA)', 160, 475, align='center', size=17)
    drawLabel('Broadcom Inc (AVGO)', 160, 555, align='center', size=17)
    drawLabel('Eli Lilly and Co (LLY)', 160, 635, align='center', size=17)
    drawLabel('Berkshire Hathaway', 160, 704, align='center', size=15)
    drawLabel('(BRK-B)', 160, 725, align='center', size=15)

def isIn(app, mouseX, mouseY, buttonLeftX, buttonTopY, width, height):
    buttonRightX = buttonLeftX + width
    buttonBotY = buttonTopY + height
    return (buttonTopY <= mouseY <= buttonBotY and 
            buttonLeftX <= mouseX <= buttonRightX)

def drawRating(app):
    drawRect(529.5, 295, 200, 120, fill=None,
             border='black', borderWidth=5)
    drawLabel('Rating:', 629.5, 320, size=22)

def drawHeadlines(app):
    # drawRect(629.5, 617.5, 600, 260, fill=None, border='black', borderWidth=5,
    #          align='center')
    if app.stock == None:
        drawLabel('Headlines', 629.5, 487.5, size=28)
        drawLine(329.5, 487.5, 550, 487.5, lineWidth=5)
        drawLine(929.5, 487.5, 705, 487.5, lineWidth=5)
    else:
        drawLabel(f'{app.stock} Headlines', 629.5, 487.5, size=28)
    drawLine(329.5, 487.5, 329.5, 747.5, lineWidth=5)
    drawLine(329.5, 747.5, 929.5, 747.5, lineWidth=5)
    drawLine(929.5, 747.5, 929.5, 487.5, lineWidth=5)
    drawLine(329.5, 487.5, 510, 487.5, lineWidth=5)
    drawLine(929.5, 487.5, 750, 487.5, lineWidth=5)


def main():
    runApp(app)
main()
